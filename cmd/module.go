/*
Copyright Â© 2023 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"github.com/sergio-prgm/tf-module/pkg/gen"
	"github.com/sergio-prgm/tf-module/pkg/inout"
	"github.com/sergio-prgm/tf-module/pkg/util"
	"github.com/spf13/cobra"
)

// moduleCmd represents the module command
var moduleCmd = &cobra.Command{
	Use:   "module",
	Short: "Generates the tfmodule.yaml file",
	Long: `
Generate the tfmodule.yaml file based on a .csv file.
The .csv should contain a mapping with ideally of all resources and is 
used for comparison with the .json file so that the tfmodule.yaml is 
generated with only the necessary resources.
	
Requires the --conf flag, which should be the path to the folder with the 
configuration file named existing_resources.csv, and the --src flag, 
which should be the path to the folder with the resource group code 
generated by the aztfexport command where the aztfexportResourceMapping.json 
file is located."`,
	Run: generateYaml,
}

func init() {
	rootCmd.AddCommand(moduleCmd)
}

func generateYaml(cmd *cobra.Command, args []string) {
	util.CheckTerraformVersion()
	yml := util.NormalizePath(ryml)
	src := util.NormalizePath(rsrc)

	resourcesMapping := inout.JsonParser(src + "aztfexportResourceMapping.json")
	csv_resources := inout.ParseCSV(yml + "existing_resources.csv")
	mapped_yaml := gen.GenerateModuleYaml(resourcesMapping, csv_resources)
	inout.WriteYaml(yml+"tfmodule.yaml", mapped_yaml)

}
