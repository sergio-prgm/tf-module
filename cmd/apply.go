package cmd

import (
	"embed"
	"errors"
	"fmt"
	"log"
	"os"
	"os/exec"
	"text/template"

	"github.com/sergio-prgm/tf-module/pkg/gen"
	"github.com/sergio-prgm/tf-module/pkg/inout"
	"github.com/sergio-prgm/tf-module/pkg/scf"
	"github.com/sergio-prgm/tf-module/pkg/util"
	"github.com/spf13/cobra"
)

//go:embed master.tmpl
var content embed.FS

// terrafyCmd represents the terrafy command
var terrafyCmd = &cobra.Command{
	Use:   "apply",
	Short: "It terrafys the existing infraestructure in terraform code",
	Long: `
Transfer the infrastructure present in a resource group to separate Terraform code by modules and with all the variables in a .tfvars file.

Requires the --conf flag, which should be the path to the folder with the configuration file (tfmodule.yaml), 
and the --src flag, which should be the path to the folder with the resource group code generated by the aztfexport command`,
	Run: runTerrafy,
}

func init() {
	rootCmd.AddCommand(terrafyCmd)
	terrafyCmd.PersistentFlags().BoolVar(&ep, "ep", false, "Flag to put the code trough different Entry points (default false)")
}

func runTerrafy(cmd *cobra.Command, args []string) {
	util.CheckTerraformVersion()
	src := util.NormalizePath(rsrc)
	yml := util.NormalizePath(ryml)
	configModules := inout.ReadConfig(yml)
	if ep {
		inout.CheckTfmoduleEntryPoints(configModules)
	}

	fmt.Print(util.EmphasizeStr(fmt.Sprintf("Reading config in %s\n", yml), util.Yellow, util.Normal))
	fmt.Print(util.EmphasizeStr(fmt.Sprintf("Reading terraform code in %s\n", src), util.Yellow, util.Normal))

	parsedBlocks := inout.ReadTfFiles(src)
	resourcesMapping := inout.JsonParser(src + "aztfexportResourceMapping.json")

	scf.CreateFolders(configModules, ep)

	/////
	_, imports_mapping, unmapped_resources := gen.GenerateImports(resourcesMapping, configModules, ep)

	resourceMap := gen.CreateVars(parsedBlocks.Resources, configModules.Modules, imports_mapping)
	err := scf.CreateFiles(parsedBlocks, resourceMap, configModules, ep)
	if err != nil {
		log.Fatal(err)
	}

	tfcmd := exec.Command("terraform", "fmt", "-recursive")
	if errors.Is(tfcmd.Err, exec.ErrDot) {
		tfcmd.Err = nil
	}
	if err := tfcmd.Run(); err != nil {
		log.Fatal(err)
	}
	templateInfo := inout.Template{
		UnmappedResources: unmapped_resources,
		NotFoundResources: gen.Not_Found_resources,
		FoundResources:    gen.Found_resources,
	}
	fmt.Println("")

	tmplData, _ := content.ReadFile("master.tmpl")
	tmpl, err := template.New("master").Parse(string(tmplData))
	if err != nil {
		fmt.Println("This is wrong")
	}

	masterFile, err := os.Create("./output/logs.txt")
	if err != nil {
		log.Fatal(err)
	}
	err = tmpl.Execute(masterFile, templateInfo)
	if err != nil {
		fmt.Println(err)
	}
	err = tmpl.Execute(os.Stdout, templateInfo)
	if err != nil {
		fmt.Println(err)
	}

}
